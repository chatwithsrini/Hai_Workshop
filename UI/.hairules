# HAI Project Rules

## 1. Code Style & Patterns

### 1.1 Architecture
- Follow Clean Architecture principles with clear separation of concerns
- Implement Repository pattern for data access layers
- Use Feature-based folder structure for scalability
- Prefer composition over inheritance
- Follow SOLID principles

### 1.2 React Specific
- Use functional components with hooks
- Implement React.memo() for performance optimization when needed
- Keep components small and focused (max 250 lines)
- Extract reusable logic into custom hooks
- Use TypeScript for type safety

### 1.3 State Management
- Use Redux Toolkit for global state management
- Implement slice pattern for Redux features
- Keep Redux state normalized
- Use local state for component-specific data
- Implement proper error boundaries

### 1.4 Styling
- Use Tailwind CSS utility classes
- Follow mobile-first responsive design
- Maintain consistent spacing using Tailwind's spacing scale
- Use CSS modules for component-specific styles
- Follow BEM naming convention for custom CSS classes

### 1.5 Code Formatting
- Use Prettier for consistent code formatting
- 2 spaces for indentation
- Max line length: 100 characters
- Use semicolons
- Use single quotes for strings
- Trailing commas in multi-line objects/arrays

## 2. Testing Standards

### 2.1 Unit Testing
- Minimum 80% test coverage for business logic
- Use Jest and React Testing Library
- Test hooks independently
- Mock external dependencies
- Follow AAA pattern (Arrange-Act-Assert)

### 2.2 Integration Testing
- Test component integration with Redux store
- Verify API integration
- Test routing functionality
- Validate form submissions
- Test error handling scenarios

### 2.3 End-to-End Testing
- Use Cypress for E2E testing
- Cover critical user journeys
- Test on multiple viewport sizes
- Verify third-party integrations
- Include accessibility testing

### 2.4 Test Organization
- Co-locate test files with source code
- Use meaningful test descriptions
- Implement proper test data factories
- Maintain test independence
- Clean up after each test

## 3. Security

### 3.1 Environment Variables
- Never commit .env files
- Use .env.example for documentation
- Store sensitive data in environment variables
- Use proper naming convention: REACT_APP_* prefix
- Implement environment-specific configurations

### 3.2 Authentication & Authorization
- Implement proper JWT handling
- Use HttpOnly cookies for sensitive data
- Implement proper CORS policies
- Sanitize all user inputs
- Implement proper session management

### 3.3 Data Protection
- Encrypt sensitive data in transit
- Implement proper error handling without exposing internals
- Use Content Security Policy headers
- Implement rate limiting
- Regular security audits

### 3.4 Dependencies
- Regular security updates
- Use npm audit
- Lock dependency versions
- Review third-party packages
- Maintain dependency documentation

## 4. Documentation Requirements

### 4.1 README.md
- Keep README.md up to date
- Include clear setup instructions
- Document available scripts
- List all environment variables
- Provide troubleshooting guide

### 4.2 Changelog
- Follow semantic versioning
- Document all significant changes
- Include upgrade instructions
- Tag all releases
- Link to relevant issues/PRs

### 4.3 Code Documentation
- Document complex business logic
- Add JSDoc comments for public APIs
- Include type definitions
- Document known limitations
- Keep comments up to date

### 4.4 Architecture Documentation
- Maintain architecture diagrams
- Document design decisions
- Include data flow diagrams
- Document third-party integrations
- Keep deployment documentation updated

### 4.5 API Documentation
- Document all API endpoints
- Include request/response examples
- Document error responses
- Maintain API versioning
- Include authentication requirements
